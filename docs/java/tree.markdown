---
layout: post
title:  树
date:   2019-04-04 17:25:26 +0800
nav_order: 1
parent: java
categories: java
---
<!-- 加入数学公式库 -->
<head>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>
</head>

*以下内容摘自《数据结构 C语言版》第六章*

树是一种重要的非线性数据结构。其中以树和二叉树最为常用，直观来看，树是以分支关系定义的层次结构。

## 定义和基本术语
树是 n(n>=0) 个节点(Node)的有限集。

在任意一棵非空树中：
1. 有且仅有一个被称为根(Root)的 Node
2. 当 n>1 时，其余 Node 可以分为 m(m>0) 个互不相交的有限集，每个有限集也是一棵树，称之为根的子树。

所以，树的结构定义是一种递归定义。

Node 拥有的子树个数称之为 Node 的度(Degree);  
度(Degree) 为 0 的Node称为叶子节点(Leaf);  
从 Root 到 Node 的路径上的 Node 个数称之为 Node 的层次(Level)；  
树中所有 Node 中 度的最大值称之为树的度;  
树中所有 Node 中 层次的最大值称之为树的深度;  
如果树中 Node 的子树从左至右的顺序不能交换，则称之为有序数，反之则为无序树。

### 二叉树
二叉树是一种特殊的树形结构，每个 Node 至多有两个子树，且左右子树顺序不可交换，即二叉树是有序树。

二叉树有如下性质：
1. 二叉树的第 i 层至多有 $$2^{i - 1}$$ 个 Node
2. 深度为 k 的二叉树至多有 $$\sum_{i=1}^k 2^{i-1} = 2^k - 1$$ 个 Node
3. 对于任意一个二叉树 T， 如果叶子节点数为 $$n_0$$, 度为 2 的节点数为 $$n_2$$, 则 $$n_0= n_2 + 1$$ 

对性质 3 的证明：  
二叉树的 Node 只有三种（度为 0、1、 2，其数量分别设为$$n_0$$、$$n_1$$、$$n_2$$），那么二叉树的 Node 总数 $$n=n_0 + n_1 + n_2$$  
另一方面，二叉树中除 Root 之外的每一个 Node 都有且仅有一个进入 Node 的边，设边的总数为B，那么二叉树的 Node 总数 $$n= B + 1$$  
又，二叉树的边都是由度为 1 或者 2 的节点射出，所以 $$B=n_1 + 2n_2$$  
综上可得$$n_0= n_2 + 1$$ 

### 满二叉树
第 i 层有 $$2^{i - 1}$$ 个 Node 的二叉树称为满二叉树

满二叉树的性质：
1. 满二叉树没有度为 1 的 Node
2. 一个有 n 个 Node 的满二叉树，深度为 $$log_2^{n + 1}$$

### 完全二叉树
完全二叉树有多种定义，这里介绍一种好理解的定义：  
若二叉树的深度为 h，且前 h - 1 层是一个满二叉树，第 h 层的所有节点都尽量靠左，则该树为完全二叉树。
```shell
              1
            /   \
          2       3
        /   \    /  \
      4      5  6    7
    /   \
   8     9
```
完全二叉树的性质：
1. 一个有 n 个 Node 的完全二叉树，深度为 $$int(log_2^n) + 1$$。*其中int(x) 表示对 x 向下取整* 
2. 一个完全二叉树按从上到下从左至右的顺序，将 1..n 挨个给 Node 编号，那么对于任意节点 i 有：
    - 如果 i = 1，则该 Node 没有 parent，否则，parent 为 $$int(i/2)$$             
    - 如果 2i > n，则 节点 i 没有左孩子，否则，2i 是其左孩子
    - 如果 2i + 1 > n，则节点 i 没有右孩子，否则，2i + 1 是其右孩子

## 二叉树存储结构
### 顺序存储结构
从完全二叉树的性质可以发现，可以使用顺序存储结构(数组)存储完全二叉树。将完全二叉树从 Root 开始自上向下，自左至右存储在一个数组中。  
```java
int completeBiTree = new int[] {1, 2, 3, 4, 5, 6, 7, 8};
```
***顺序存储结构只能用于存储完全二叉树***

### 链式存储结构
使用链式存储结构存储二叉树，一个 Node 可以定义为两个链域(left 和 right)和一个值域(data):
```java
public class Node {
    Node left;
    Node right;
    Object data;
}
```
可以证明，有 n 个 Node 的链表必有 n + 1 个空链域。  
证明如下：  
假设分别用$$n_0$$、$$n_1$$、$$n_2$$代表度为0、1、2的节点，N 表示空链域的个数。  
显而易见，$$n_0$$、$$n_1$$、$$n_2$$中的空链域分别是2、1、0，那么 $$N=n_1 + 2 * n_0$$  
又，二叉树的性质 $$n_0 = n_2 + 1$$  
可得 $$N = n_1 + 2 * n_0 = n_0 + n_1 + n_2 + 1 = n + 1$$